#include <physical_layouts.dtsi>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800
#define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define SNIPE 4
#define SCROLL 5
#define SCROLL_WARP 6
#define SCROLL_SNIPE 7
&mmv {
    delay-ms = <0>;
    trigger-period-ms = <10>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <1>;
};

&msc {
    delay-ms = <0>;
    trigger-period-ms = <10>;
    time-to-max-speed-ms = <0>;
    acceleration-exponent = <0>;
};

/ {
    input_processors {
        zip_wheel_scaler: zip_wheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_WHEEL>;
            track-remainders;
        };

        zip_hwheel_scaler: zip_hwheel_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_HWHEEL>;
            track-remainders;
        };
    };
};

&msc_input_listener {
    warp {
        layers = <SCROLL_WARP>;
        input-processors = <&zip_wheel_scaler 4 1>, <&zip_hwheel_scaler 4 1>;
    };

    precision {
        layers = <SCROLL_SNIPE>;
        input-processors = <&zip_wheel_scaler 1 4>, <&zip_hwheel_scaler 1 4>;
    };
};

&trackball_listener {
    scroller {
        layers = <SCROLL>;
        input-processors = <&zip_xy_to_scroll_mapper>;
    };

    scroller_warp {
        layers = <SCROLL_WARP>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_wheel_scaler 4 1>,
            <&zip_hwheel_scaler 4 1>;
    };

    scroller_precision {
        layers = <SCROLL_SNIPE>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_wheel_scaler 1 4>,
            <&zip_hwheel_scaler 1 4>;
    };
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt LALT LANG2>, <&mo 2>, <&mo 0>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mt RCTL LANG1>, <&mo 2>, <&mo 0>;
        };

        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };

        mouse_click: mouse_button_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mkp>, <&mkp>;
        };

        mouse_mv: mouse_cursor_move {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&mmv>, <&mmv>;

            tap-ms = <10>;
        };

        mouse_scrl: mouse_wheel_scrl {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <10>;
        };
    };
};

&sl { release-after-ms = <250>; }; // time needed for double click (for mkp_exit_AML)
/ {
    macros {
        // When in AML, move to default layer when key (except mouse button) pressed

        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_layer_0";
        };

        // When LCLK pressed, exit AML (after 250ms cause by sticky layer)

        mkp_exit_AML: mkp_exit_AML {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mkp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&sl 0>;

            label = "MKP_EXIT_AML";
        };

        // Support swapping into Scroll layer when AML is activated

        to_scroll_layer: to_scroll_layer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 4>,
                <&macro_press>,
                <&mo 4>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&mo 4>;
        };

        double00: double00 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&kp N0 &kp N0>;

            label = "DOUBLE00";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        key1905: key1905 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp LC(V) &kp PLUS &kp N1 &kp N9 &kp DOT &kp N0 &kp N5 &kp STAR>;

            label = "KEY1905";
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        base_layer {
            display-name = "Base";
            sensor-bindings =
                <&mouse_scrl SCRL_DOWN SCRL_UP>,
                <&mouse_scrl SCRL_UP SCRL_DOWN>;

            bindings = <
&kp ESC       &kp N1  &kp N2  &kp N3        &kp N4    &kp N5                        &kp NUMBER_6         &kp N7     &kp N8  &kp N9     &kp N0   &kp EQUAL
&kp TAB       &kp Q   &kp W   &kp E         &kp R     &kp T                         &kp Y                &kp U      &kp I   &kp O      &kp P    &kp MINUS
&kp LEFT_WIN  &kp A   &kp S   &kp D         &kp F     &kp G     &lt 3 SQT           &lt 2 BACKSLASH      &kp H      &kp J   &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LSHFT     &kp Z   &kp X   &kp C         &kp V     &kp B     &lt 2 LEFT_BRACKET  &lt 3 RIGHT_BRACKET  &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH   &lt 1 BACKSLASH
&kp LCTRL             &mo 1   &kp LEFT_ALT  &mkp MB1  &mkp MB2  &mo 1               &kp BACKSPACE        &kp SPACE                              &lt 2 SQT                   &mo 1  &mo 1  &mo 1
            >;
        };

        layer_1 {
            display-name = "Lower";
            sensor-bindings = <&inc_dec_kp LC(PAGE_DOWN) LC(PAGE_UP)>;
            bindings = <
&trans  &none           &none  &none         &none     &none                                  &none          &none         &none         &none           &none      &none
&trans  &none           &none  &kp CAPSLOCK  &mkp MB3  &kp PRINTSCREEN                        &none          &none         &kp UP_ARROW  &none           &none      &none
&trans  &none           &sl 7  &sl 6         &sl 5     &kp HOME         &kp PG_UP             &kp PAGE_DOWN  &kp C_VOL_UP  &kp LEFT      &kp DOWN_ARROW  &kp RIGHT  &sl 4  &none
&trans  &studio_unlock  &none  &none         &key1905  &kp END          &kp LEFT_PARENTHESIS  &kp RPAR       &kp C_VOL_DN  &double00     &none           &none      &none  &none
&none                   &none  &trans        &none     &none            &none                 &kp DEL        &kp DEL                                                &none         &mo 1  &mo 1  &mo 1
            >;
        };

        layer_2 {
            display-name = "Raise";
            sensor-bindings = <&inc_dec_kp LG(LS(RIGHT)) LG(LS(LEFT))>;
            bindings = <
&trans  &kp F1              &kp F2              &kp F3               &kp F4  &kp F5                   &kp F6          &kp F7        &kp F8        &kp F9          &kp F10       &none
&trans  &kp F11             &kp F12             &none                &none   &none                    &studio_unlock  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4
&trans  &none               &kp LG(UP_ARROW)    &none                &none   &none   &msc SCRL_LEFT   &kp PG_UP       &kp HOME      &bt BT_CLR    &bt BT_CLR_ALL  &bt BT_PRV    &bt BT_NXT    &none
&trans  &kp LG(LEFT_ARROW)  &kp LG(DOWN_ARROW)  &kp LG(RIGHT_ARROW)  &none   &none   &msc SCRL_RIGHT  &kp PG_DN       &kp END       &none         &none           &none         &none         &none
&trans                      &none               &trans               &trans  &trans  &trans           &trans          &kp DEL                                                   &trans               &mo 1  &mo 1  &mo 1
            >;
        };

        layer_3 {
            display-name = "Adjust";
            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
            bindings = <
&none  &kp KP_NUMLOCK  &kp KP_N1  &kp KP_N2  &kp KP_N3     &kp KP_MINUS         &none  &none           &none  &none  &none  &none
&none  &kp ASTERISK    &kp KP_N4  &kp KP_N5  &kp KP_N6     &kp KP_PLUS          &none  &none           &none  &none  &none  &none
&none  &none           &kp KP_N7  &kp KP_N8  &kp KP_N9     &kp KP_ENTER  &none  &none  &none           &none  &none  &none  &none  &none
&none  &none           &kp KP_N0  &kp DOT    &kp KP_SLASH  &kp KP_ENTER  &none  &none  &studio_unlock  &none  &none  &none  &none  &none
&none                  &none      &none      &none         &none         &none  &none  &none                                &none         &mo 1  &mo 1  &mo 1
            >;
        };

        // Extra layer can be added in ZMK STUDIO

        SNPIE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans          &mo 1  &mo 1  &mo 1
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans          &mo 1  &mo 1  &mo 1
            >;
        };

        SCROLL_WARP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans          &mo 1  &mo 1  &mo 1
            >;
        };

        SCROLL_SNIPE {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans          &mo 1  &mo 1  &mo 1
            >;
        };
    };
};